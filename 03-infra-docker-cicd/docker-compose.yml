# Docker Compose configuration for the full application stack
# 
# This configuration demonstrates containerization best practices:
# - Multi-stage builds for optimized images
# - Non-root users for security
# - Health checks for reliability
# - Environment variable management
# - Network isolation

version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: ../01-backend-nestjs-clean-arch
      dockerfile: Dockerfile
    container_name: users-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - FRONTEND_URL=http://localhost:5173
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-network

  # Frontend application service
  frontend:
    build:
      context: ../02-frontend-react-component
      dockerfile: Dockerfile
    container_name: users-frontend
    ports:
      - "5173:80"
    environment:
      - VITE_API_URL=http://localhost:3000
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  # Nginx reverse proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: users-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - production

  # Development database (optional, for future use)
  postgres:
    image: postgres:15-alpine
    container_name: users-db
    environment:
      - POSTGRES_DB=users_db
      - POSTGRES_USER=users_user
      - POSTGRES_PASSWORD=users_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U users_user -d users_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - database

  # Redis cache (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: users-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - cache

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16


